//
//  HomeDataService.swift
//  WhichMovieTonight
//
//  Created by AI Assistant on 25/04/2025.
//

import Foundation

// MARK: - Home Data Service Protocol

protocol HomeDataServiceProtocol {
    func loadUserDisplayName(userId: String) async -> String
    func loadTodaysRecommendations(userId: String) async throws -> [Movie]
    func generateDailyRecommendations(userId: String) async throws -> [Movie]
    func refreshRecommendations(userId: String) async throws -> [Movie]
    func setupNotifications() async throws
}

// MARK: - Home Data Service Implementation

final class HomeDataService: HomeDataServiceProtocol {
    // MARK: - Dependencies (injected)

    @Injected private var userDataService: UserDataServiceProtocol
    @Injected private var recommendationCacheService: RecommendationCacheServiceProtocol
    @Injected private var userPreferencesService: UserPreferencesService
    @Injected private var dailyNotificationService: DailyNotificationServiceProtocol
    @Injected private var getDailyRecommendationsUseCase: GetDailyRecommendationsUseCase

    // MARK: - Public Methods

    func loadUserDisplayName(userId: String) async -> String {
        guard let userData = try? await userDataService.getUserMovieData(for: userId),
              let firstName = userData.selectedMovie?.title.split(separator: " ").first
        else {
            return "Cin√©phile"
        }
        return String(firstName)
    }

    func loadTodaysRecommendations(userId: String) async throws -> [Movie] {
        do {
            print("üîÑ Chargement des recommandations pour \(userId)")

            // V√©rifier d'abord si des recommandations existent en cache
            if let cachedRecommendations = try await recommendationCacheService.getTodaysRecommendations() {
                print("‚úÖ Recommandations trouv√©es en cache: \(cachedRecommendations.movies.count) films")
                let movies = cachedRecommendations.movies.map { $0.toMovie() }

                // Log des films trouv√©s
                for (index, movie) in movies.enumerated() {
                    print("üìΩÔ∏è \(index + 1). \(movie.title) (\(movie.year ?? "N/A"))")
                }

                return movies
            }

            print("üìÑ Aucune recommandation en cache pour aujourd'hui")

            // V√©rifier si nous devons g√©n√©rer automatiquement ou attendre
            let shouldGenerate = try await recommendationCacheService.shouldGenerateNewRecommendations()

            if shouldGenerate {
                print("üé¨ G√©n√©ration imm√©diate de nouvelles recommandations")
                return try await generateDailyRecommendations(userId: userId)
            } else {
                print("‚è≥ En attente des recommandations programm√©es")
                // Retourner une liste vide - les recommandations seront g√©n√©r√©es √† 6h
                return []
            }

        } catch {
            print("‚ùå Erreur lors du chargement des recommandations: \(error)")
            // En cas d'erreur, essayer de g√©n√©rer de nouvelles recommandations
            print("üîÑ Tentative de g√©n√©ration de nouvelles recommandations en fallback")
            return try await generateDailyRecommendations(userId: userId)
        }
    }

    func generateDailyRecommendations(userId: String) async throws -> [Movie] {
        print("üé¨ G√©n√©ration de nouvelles recommandations quotidiennes pour \(userId)")

        do {
            let userPreferences = userPreferencesService.getUserPreferences()

            // V√©rifier que les pr√©f√©rences sont valides
            guard userPreferences.isValid else {
                throw RecommendationError.missingPreferences("Pr√©f√©rences utilisateur incompl√®tes")
            }

            let movies = try await getDailyRecommendationsUseCase.execute(
                preferences: userPreferences,
                userId: userId
            )

            // Sauvegarder les nouvelles recommandations avec la date d'aujourd'hui
            let dailyRecommendations = DailyRecommendations(
                userId: userId,
                date: Calendar.current.startOfDay(for: Date()),
                movies: movies.map { MovieFirestore(from: $0) }
            )

            try await recommendationCacheService.saveDailyRecommendations(dailyRecommendations)

            print("‚úÖ \(movies.count) nouvelles recommandations g√©n√©r√©es et sauvegard√©es")

            // Poster une notification pour informer que les recommandations sont pr√™tes
            NotificationCenter.default.post(name: .recommendationsGenerated, object: movies)

            return movies
        } catch {
            print("‚ùå Erreur lors de la g√©n√©ration des recommandations: \(error)")
            throw error
        }
    }

    func refreshRecommendations(userId: String) async throws -> [Movie] {
        print("üîÑ Actualisation forc√©e des recommandations")
        return try await generateDailyRecommendations(userId: userId)
    }

    func setupNotifications() async throws {
        print("üì± Configuration des notifications quotidiennes")

        let granted = await dailyNotificationService.requestPermission()
        if granted {
            // Supprimer l'ancienne notification de g√©n√©ration √† 6h
            dailyNotificationService.cancelGenerationNotifications()

            // Programmer seulement la notification √† 8h (quand les films sont pr√™ts)
            dailyNotificationService.scheduleDailyRecommendationNotification()

            print("‚úÖ Notifications configur√©es avec succ√®s:")
            print("   - Notification: 8h00 (les films sont pr√™ts)")
        } else {
            print("‚ö†Ô∏è Permission de notification refus√©e")
            throw NotificationError.permissionDenied
        }
    }
}

// MARK: - Errors

enum NotificationError: LocalizedError {
    case permissionDenied

    var errorDescription: String? {
        switch self {
        case .permissionDenied:
            return "Permission de notification refus√©e"
        }
    }
}
